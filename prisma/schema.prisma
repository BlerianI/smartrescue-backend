generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model access_logs {
  access_id       String    @id @db.Uuid
  access_time     DateTime  @default(now()) @db.Timestamp(6)
  access_location String    @default("unknown")
  profile_id      String?   @db.Uuid
  profiles        profiles? @relation(fields: [profile_id], references: [profile_id], onDelete: Cascade, onUpdate: NoAction)
}

model allergies {
  allergy_id    String         @id @db.Uuid
  allergy_name  String
  note          String?
  med_id        String?        @db.Uuid
  medical_datas medical_datas? @relation(fields: [med_id], references: [med_id], onDelete: Cascade, onUpdate: NoAction)
}

model doctors {
  doctor_id    String    @id @db.Uuid
  title        String
  last_name    String
  first_name   String
  phone_number String
  specialty    String
  street       String
  city         String
  house_number String
  postal_code  String
  profile_id   String?   @db.Uuid
  profiles     profiles? @relation(fields: [profile_id], references: [profile_id], onDelete: Cascade, onUpdate: NoAction)
}

model documents {
  document_id    String         @id @db.Uuid
  document_title String
  document_url   String
  uploaded_at    DateTime       @default(now()) @db.Timestamp(6)
  med_id         String?        @db.Uuid
  medical_datas  medical_datas? @relation(fields: [med_id], references: [med_id], onDelete: Cascade, onUpdate: NoAction)
}

model emergency_contacts {
  contact_id   String    @id @db.Uuid
  last_name    String
  first_name   String
  phone_number String
  relationship String
  note         String?
  priority     Int
  profile_id   String?   @db.Uuid
  profiles     profiles? @relation(fields: [profile_id], references: [profile_id], onDelete: Cascade, onUpdate: NoAction)
}

model login_logs {
  log_id         String   @id @db.Uuid
  attempt_time   DateTime @default(now()) @db.Timestamp(6)
  success        Boolean
  failure_reason String?  @default("none")
  user_id        String?  @db.Uuid
  users          users?   @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model med_conditions {
  condition_id    String         @id @db.Uuid
  condition_name  String
  note            String?
  diagnosed_since String
  med_id          String?        @db.Uuid
  medical_datas   medical_datas? @relation(fields: [med_id], references: [med_id], onDelete: Cascade, onUpdate: NoAction)
}

model medical_datas {
  med_id         String           @id @db.Uuid
  key_info       String?
  profile_id     String?          @db.Uuid
  allergies      allergies[]
  documents      documents[]
  med_conditions med_conditions[]
  profiles       profiles?        @relation(fields: [profile_id], references: [profile_id], onDelete: Cascade, onUpdate: NoAction)
  medications    medications[]
}

model medications {
  medication_id String         @id @db.Uuid
  med_name      String
  dosage        String
  frequency     String
  note          String?
  med_id        String?        @db.Uuid
  medical_datas medical_datas? @relation(fields: [med_id], references: [med_id], onDelete: Cascade, onUpdate: NoAction)
}

model profiles {
  profile_id         String               @id @db.Uuid
  external_id        String               @unique @db.Uuid
  created_at         DateTime             @default(now()) @db.Timestamp(6)
  updated_at         DateTime             @default(now()) @db.Timestamp(6)
  gender             String
  birthdate          String
  last_name          String
  first_name         String
  height             String
  weight             String
  avatar_url         String
  blood_type         String
  street             String
  city               String
  house_number       String
  postal_code        String
  user_id            String?              @db.Uuid
  access_logs        access_logs[]
  doctors            doctors[]
  emergency_contacts emergency_contacts[]
  medical_datas      medical_datas[]
  users              users?               @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  user_id    String       @id @db.Uuid
  last_login DateTime     @db.Timestamp(6)
  created_at DateTime     @default(now()) @db.Timestamp(6)
  updated_at DateTime     @default(now()) @db.Timestamp(6)
  username   String?      @unique @db.VarChar(32)
  email      String       @unique @db.VarChar(254)
  password   String
  role       String       @default("user") @db.VarChar(5)
  is_active  Boolean      @default(true)
  avatar_url String?
  login_logs login_logs[]
  profiles   profiles[]
}
